<?php
/**
 * This file is part of the Global Trading Technologies Ltd workflow-extension-bundle package.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * (c) fduch <alex.medwedew@gmail.com>
 * @date 27.07.16
 */

namespace Gtt\Bundle\WorkflowExtensionsBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Gtt\Bundle\WorkflowExtensionsBundle\Exception\InvalidArgumentException;
use JMS\JobQueueBundle\Entity\Job;

/**
 * Persists information about scheduled transition (as jms Job) for specified workflow and subject
 * and allows to fetch it in order to manipulate or re-schedule
 * @see Job
 *
 * @ORM\Entity(repositoryClass = "Gtt\Bundle\WorkflowExtensionsBundle\Entity\Repository\ScheduledJobRepository")
 *
 * @ORM\Table(name = "gtt_workflow_scheduled_job", indexes = {
 *     @ORM\Index("jms_related_search_index", columns = {"workflow", "transition", "subject_class", "subject_id"}),
 * })
 *
 * (c) fduch <alex.medwedew@gmail.com>
 */
class ScheduledJob
{
    /**
     * Autogenerated id
     *
     * @var int
     *
     * @ORM\Id
     * @ORM\GeneratedValue(strategy = "AUTO")
     * @ORM\Column(type = "integer", options = {"unsigned": true})
     */
    private $id;

    /**
     * Workflow name which transition should be scheduled
     *
     * @var string
     *
     * @ORM\Column(type="string", name="workflow", length=255)
     */
    private $workflow;

    /**
     * Transition name to be scheduled
     *
     * @var string
     *
     * @ORM\Column(type="string", name="transition", length=255)
     */
    private $transition;

    /**
     * Class of the subject to be transited
     *
     * @var string
     *
     * @ORM\Column(type="string", name="subject_class", length=255)
     */
    private $subjectClass;

    /**
     * Identifier of the subject to be transited
     *
     * @var int
     *
     * @ORM\Column(type = "integer", name="subject_id", options = {"unsigned": true})
     */
    private $subjectId;

    /**
     * Related jms Job to be executed later
     *
     * @var Job
     *
     * @ORM\OneToOne(targetEntity="JMS\JobQueueBundle\Entity\Job")
     * @ORM\JoinColumn(name="jms_job_id", referencedColumnName="id")
     */
    private $job;

    /**
     * ScheduledJob constructor.
     *
     * @param string $workflow             workflow name
     * @param string $transition           transition
     * @param string $subjectClass         subject class
     * @param int    $subjectId            subject id
     * @param Job    $transitionTriggerJob transition trigger job
     */
    public function __construct($workflow, $transition, $subjectClass, $subjectId, Job $transitionTriggerJob)
    {
        $this->setWorkflow($workflow);
        $this->setTransition($transition);
        $this->setSubjectClass($subjectClass);
        $this->setSubjectId($subjectId);
        $this->job = $transitionTriggerJob;
    }


    /**
     * Returns id
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Returns workflow
     *
     * @return string
     */
    public function getWorkflow()
    {
        return $this->workflow;
    }

    /**
     * Sets workflow
     *
     * @param string $workflow workflow
     *
     * @return ScheduledJob
     *
     * @throws InvalidArgumentException
     */
    public function setWorkflow($workflow)
    {
        if (empty($workflow)) {
            throw new InvalidArgumentException('Workflow name must not be empty');
        }

        $this->workflow = $workflow;

        return $this;
    }

    /**
     * Returns transition
     *
     * @return string
     */
    public function getTransition()
    {
        return $this->transition;
    }

    /**
     * Sets transition
     *
     * @param string $transition transition
     *
     * @return ScheduledJob
     *
     * @throws InvalidArgumentException
     */
    public function setTransition($transition)
    {
        if (empty($transition)) {
            throw new InvalidArgumentException('Transition name must not be empty');
        }

        $this->transition = $transition;

        return $this;
    }

    /**
     * Returns subject class
     *
     * @return string
     */
    public function getSubjectClass()
    {
        return $this->subjectClass;
    }

    /**
     * Sets subject class
     *
     * @param string $subjectClass subject class
     *
     * @return ScheduledJob
     *
     * @throws InvalidArgumentException
     */
    public function setSubjectClass($subjectClass)
    {
        if (empty($subjectClass)) {
            throw new InvalidArgumentException('Subject class must not be empty');
        }

        $this->subjectClass = $subjectClass;

        return $this;
    }

    /**
     * Returns subject id
     *
     * @return int
     */
    public function getSubjectId()
    {
        return $this->subjectId;
    }

    /**
     * Sets subject id
     *
     * @param int $subjectId subject id
     *
     * @return ScheduledJob
     *
     * @throws InvalidArgumentException
     */
    public function setSubjectId($subjectId)
    {
        if ((int) $subjectId <= 0) {
            throw new InvalidArgumentException('Subject id must be integer positive value');
        }

        $this->subjectId = (int) $subjectId;

        return $this;
    }

    /**
     * Returns Job
     *
     * @return Job
     */
    public function getJob()
    {
        return $this->job;
    }

    /**
     * Sets Job
     *
     * @param Job $job Related jms job
     *
     * @return ScheduledJob
     */
    public function setJob($job)
    {
        $this->job = $job;

        return $this;
    }
}